                    Functions:-
Functions are self-contained block of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform .
Parameters can provide default values to simplify function calls and can be passed as in-out parameters, which modify a passed variable once the function has completed its execution.
Every function in Swift has a type, consisting of the function’s parameter types and return type.  Functions can also be written within other functions to encapsulate useful functionality within a nested function scope.

            Defining and Calling Functions:-
When you define a function, you can optionally define one or more named, typed values that the function takes as input, known as parameters. You can also optionally define a type of value that the function will pass back as output when it is done, known as its return type.

            Function Parameters and Return Values:-
Function parameters and return values are very flexible in Swift. You can define anything from a simple  function with a single unnamed parameter to a complex function with expressive parameter names

            Functions Without Parameters:-
Functions are not required to define input parameters. Here’s a function with no input parameters, which always returns the same String message whenever it is called:
func sayHelloWorld() -> String {
return "hello, world"
}
print(sayHelloWorld())
// Prints "hello, world"
The function definition still needs parentheses after the function’s name, even though it does not take any parameters.

            Functions With Multiple Parameters:-
Functions can have multiple input parameters, which are written within the function’s parentheses, separated by commas.
This function takes a person’s name and whether they have already been greeted as input, and returns an appropriate greeting for that person:
func greet(person: String, alreadyGreeted: Bool) -> String {
if alreadyGreeted {
return greetAgain(person: person)
} else {
return greet(person: person)
}
}
print(greet(person: "Tim", alreadyGreeted: true))
// Prints "Hello again, Tim!"

