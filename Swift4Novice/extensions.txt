                    Extensions:-
Extensions add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you do not have access to the original source code (known as retroactive modeling).
Extensions in Swift can:-
-Add computed instance properties and computed type properties
-Define instance methods and type methods
-Provide new initializers
-Define subscripts
-Define and use new nested types
-Make an existing type conform to a protocol
NOTE:-
Extensions can add new functionality to a type, but they cannot override existing functionality.
Extension Syntax:-
Declare extensions with the extension keyword:
extension SomeType {
// new functionality to add to SomeType goes here
}
An extension can extend an existing type to make it adopt one or more protocols. To add protocol conformance, you write the protocol names the same way as you write them for a class or structure:
extension SomeType: SomeProtocol, AnotherProtocol {
// implementation of protocol requirements goes here
}
Adding protocol conformance in this way is described in Adding Protocol Conformance with an Extension.




