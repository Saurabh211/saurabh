                    Inheritance:-

A class can inherit methods, properties, and other characteristics from another class. When one class inherits from another.
The inheriting class is known as a subclass, and the class it inherits from is known as its superclass.
Classes in Swift can call and access methods, properties, and subscripts belonging to their superclass and can provide their own overriding versions of those methods, properties, and subscripts to refine or modify their behavior.
Defining a Base Class:-
class Vehicle {
var currentSpeed = 0.0
var description: String {
return "traveling at \(currentSpeed) miles per hour"
}
func makeNoise() {
// do nothing - an arbitrary vehicle doesn't necessarily make a noise
}
}

                    Subclassing:-
Subclassing is the act of basing a new class on an existing class. The subclass inherits characteristics from the existing class, which you can then refine. You can also add new characteristics to the subclass.
To indicate that a subclass has a superclass, write the subclass name before the superclass name, separated by a colon:
class SomeSubclass: SomeSuperclass {
// subclass definition goes here
}
The following example defines a subclass called Bicycle, with a superclass of Vehicle:
class Bicycle: Vehicle {
var hasBasket = false
}

                    Overriding:-
A subclass can provide its own custom implementation of an instance method, type method, instance property, type property, or subscript that it would otherwise inherit from a superclass. This is known as overriding.



